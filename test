    @staticmethod
    def heuristic(cl, litt, ec, el, choice):
        """
        Choisit un littéral pour avancer dans DPLL.
        :param cl: ensemble de clauses
        :param litt: ensemble de littéraux
        :param ec: liste des états des clauses
        :param el: liste des états des littéraux
        :param choice: choix de l'heuristique
        :return: indice du littéral choisit
        """
        # Clause unitaire ???
        for i in range(len(ec)):
            if ec[i] == 0:
                litt_list = cl[i]
                unwanted = []
                for j in litt_list:
                    if el[int((j + (len(el) / 2)) % len(el))] == 1:
                        unwanted += [j]
                for k in unwanted:
                    if k in litt_list:
                        litt_list = litt_list.remove(k)
                if len(litt_list) == 1:
                    return litt_list[0]
        # Heuristiques
        if choice == "first_satisfy" or choice == "first_fail":
            # Obtention du littéral ayant le plus d'occurences
            m = 0
            res = 0
            for l in range(len(el)):
                counter = 0
                if el[l] == 0 and el[int((l + (len(el) / 2)) % len(el))] != 1:
                    for c in litt[l]:
                        if ec[c] == 0:
                            counter += 1
                if counter >= m:
                    m = counter
                    res = l
            if choice == "first_satisfy":
                return res
            else:
                return int((res + (len(el) / 2)) % len(el))
        else:
            for i in range(len(el)):
                if el[i] == 0:
                    if el[int((i + (len(el) / 2)) % len(el))] != 1:  # pas forcément utile suivant DPLL.
                        return i
